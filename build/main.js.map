{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.2.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport { Client, client, xml, jid } from \"@xmpp/client\";\n// import { log, error, trace } from \"console\";\n// import debug from \"@xmpp/debug\";\n\n\ninterface jidConfig {\n\tadmin_jids: string[];\n\tallow_messages_from_jids: string[];\n\tallow_subscribe_from_jids: string[];\n\tsend_all_messages_to_jids: string[];\n}\n\n\ntype MessageCallback = (result?: any) => void | Promise<void>;\n\n\nclass Xmpp extends utils.Adapter {\n\txmpp: Client = client();\n\txmpp_connected = false;\n\tstateChange_callbacks: MessageCallback[] = [];\n\tjids: jidConfig = {\n\t\tadmin_jids: [],\n\t\tallow_messages_from_jids: [],\n\t\tallow_subscribe_from_jids: [],\n\t\tsend_all_messages_to_jids: []\n\t};\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"xmpp\",\n\t\t});\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\n\t\t// this.on(\"objectChange\", this.onObjectChange.bind(this));\n\t\tthis.on(\"message\", this.onMessage.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState(\"info.connection\", false, true);\n\t\tthis.xmpp_connected = true;\n\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// this.log.info(\"config starttls: \" + this.config.tls);\n\t\t// this.log.info(\"config port: \" + this.config.port);\n\n\tif (\"undefined\" === typeof this.config.users || !this.config.users.length) {\n\t\t\treturn Promise.reject()\n\t\t}\n\t\tlet users\n\t\tif (\"object\" === typeof this.config.users) {\n\t\t\tusers = Object.values(this.config.users)\n\t\t} else {\n\t\t\tusers = this.config.users\n\t\t}\n\n\t\tconst admin_jids = users\n\t\t\t.filter(user => user.admin)\n\t\t\t.map(user => user.jid)\n\n\t\tconst allow_messages_from_jids = users\n\t\t\t.filter(user => user.allow_messages)\n\t\t\t.map(user => user.jid)\n\n\t\tconst allow_subscribe_from_jids = users\n\t\t\t.filter(user => user.allow_subscribe)\n\t\t\t.map(user => user.jid)\n\n\t\tconst send_all_messages_to_jids = users\n\t\t\t.filter(user => user.send_all_messages)\n\t\t\t.map(user => user.jid)\n\n\t\tthis.jids.admin_jids = admin_jids\n\t\tthis.jids.allow_messages_from_jids = allow_messages_from_jids\n\t\tthis.jids.allow_subscribe_from_jids = allow_subscribe_from_jids\n\t\tthis.jids.send_all_messages_to_jids = send_all_messages_to_jids\n\n\n\n\t\tlet scheme: string;\n\t\tswitch(this.config.tls) {\n\t\t\tcase \"plain\":\n\t\t\tcase \"starttls\":\n\t\t\tdefault:\n\t\t\t\tscheme = \"xmpp\"\n\t\t\t\tbreak;\n\n\t\t\tcase \"ssl\":\n\t\t\t\tscheme = \"xmpps\"\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis.xmpp = client({\n\t\t\tservice: `${scheme}://${this.config.hostname}:${this.config.port}`,\n\t\t\tdomain: this.config.hostname,\n\t\t\tresource: \"iobroker+\" + (Math.random() + 1).toString(36).substring(5),\n\t\t\tusername: this.config.username,\n\t\t\tpassword: this.config.password,\n\t\t});\n\n\t\t// debug(this.xmpp, true);\n\n\t\tthis.xmpp.on(\"error\", (err) => {\n\t\t\tthis.log.error(\"XMPP error: \" + err);\n\t\t\t// error(err);\n\t\t});\n\n\t\tthis.xmpp.on(\"offline\", () => {\n\t\t\tthis.setState(\"info.connection\", false, true);\n\t\t\tthis.xmpp_connected = false;\n\t\t\tthis.log.info(\"XMPP disconnected\");\n\t\t\t// log(\"offline\");\n\t\t});\n\n\t\tthis.xmpp.on(\"stanza\", async (stanza) => {\n\t\t\ttry {\n\n\t\t\t\t// log(stanza.toString())\n\n\t\t\t\tconst sender_jid = stanza.attrs.from ? jid(stanza.attrs.from) : \"\"\n\t\t\t\tconst sender_resource = sender_jid ? sender_jid.getResource().toString() : \"\"\n\t\t\t\tconst sender = sender_jid ? sender_jid.bare().toString() : \"\"\n\n\t\t\t\t// log(sender)\n\n\n\t\t\t\tif (stanza.is(\"message\")) {\n\t\t\t\t\tconst receiver_jid = jid(stanza.attrs.to)\n\t\t\t\t\tconst receiver = receiver_jid.bare().toString()\n\n\t\t\t\t\t// log(\"message\")\n\n\t\t\t\t\tif(allow_messages_from_jids.includes(sender)) {\n\t\t\t\t\t\tconst body = stanza.getChildText(\"body\");\n\t\t\t\t\t\tthis.setStateAsync(\"last_message.from.resource\", sender_resource, true);\n\t\t\t\t\t\tthis.setStateAsync(\"last_message.from.user\", sender, true);\n\t\t\t\t\t\tthis.setStateAsync(\"last_message.to.user\", receiver, true);\n\t\t\t\t\t\tthis.setStateAsync(\"last_message.message\", body, true);\n\t\t\t\t\t\tconst object_last_message = {\n\t\t\t\t\t\t\t\"from.resource\": sender_resource,\n\t\t\t\t\t\t\t\"from.user\": sender,\n\t\t\t\t\t\t\t\"to.user\": receiver,\n\t\t\t\t\t\t\t\"message\": body\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setStateAsync(\"last_message.object\", JSON.stringify(object_last_message), true);\n\n\t\t\t\t\t\t// this.setState(\"info.connection\", true, true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (stanza.is(\"presence\")) {\n\t\t\t\t\t\tif(`${this.config.username}@${this.config.hostname}` !== sender) {\n\t\t\t\t\t\t\t// this.xmpp.send(xml(\"presence\", { type: \"subscribe\", from: `${this.config.username}@${this.config.hostname}`, to: sender  }));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} catch(e) {\n\t\t\t\tlet error\n\t\t    if (typeof e === \"string\") {\n\t\t        error = e.toUpperCase()\n\t\t    } else if (e instanceof Error) {\n\t\t        error = e.message\n\t\t    }\n\n\t\t    if(error) {\n\t\t\t\t\tthis.log.error(error)\n\t\t\t\t\t// trace();\n\t\t    }\n\t\t\t}\n\t\t});\n\n\t\tthis.xmpp.on(\"online\", async () => {\n\t\t\t// Makes itself available\n\t\t\tawait this.xmpp.send(xml(\"presence\"));\n\n\t\t\tthis.setState(\"info.connection\", true, true);\n\t\t\tthis.xmpp_connected = true;\n\n\t\t\t// notify admins when adapter gets online\n\t\t\tconst stanzas = admin_jids.map((address) =>\n\t\t\t  xml(\"message\", { to: address, type: \"chat\" }, xml(\"body\", {}, \"XMPP Adapter is now online\")),\n\t\t\t);\n\t\t\tawait this.xmpp.sendMany(stanzas).catch(console.error);\n\t\t});\n\n\t\tthis.xmpp.start().catch(this.log.error);\n\n\n\n\n\n\t\t/*\n\t\tFor every state in the system there has to be also an object of type state\n\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t*/\n\t\tawait this.setObjectNotExistsAsync(\"last_message.object\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"the last received message as json object\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"json\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\t\tawait this.setObjectNotExistsAsync(\"last_message.from.resource\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"resource of user that send the last received message\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"text\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\t\tawait this.setObjectNotExistsAsync(\"last_message.from.user\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"user that send the last received message\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"text\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\t\tawait this.setObjectNotExistsAsync(\"last_message.to.user\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"user the last received message was send to\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"text\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\t\tawait this.setObjectNotExistsAsync(\"last_message.message\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname:\" text of the last received message\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"text\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\n\t\t\tthis.xmpp.send(xml(\"presence\", { type: \"unavailable\" })).then(() => {\n\t\t\t\tthis.xmpp.stop().then(() => {\n\t\t\t\t\tcallback();\n\t\t\t\t});\n\t\t\t});\n\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tif(state.ack && id === \"last_message.object\") {\n\t\t\t\tthis.stateChange_callbacks.map(async (fn, i, fns) => {\n\t\t\t\t\tconst json = state.val?.toString() ?? \"null\";\n\t\t\t\t\tfn(JSON.parse(json));\n\t\t\t\t\tdelete fns[i];\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t/**\n\t * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t */\n\tprivate onMessage(obj: ioBroker.Message): void {\n\t\t// TODO: retry transmission\n\t\tif(!this.xmpp_connected) {\n\t\t\tthis.log.error(\"XMPP not connected! refusing sendTo\")\n\t\t\treturn;\n\t\t}\n\n\t\t// this.log.info(\"received command\" + JSON.stringify(obj));\n\n\t\t// log(obj)\n\t\tif (typeof obj === \"object\" && obj.message) {\n\t\t\tif (obj.command === \"send\") {\n\t\t\t\t// e.g. send email or pushover or whatever\n\t\t\t\tthis.log.info(\"send command\");\n\n\n\t\t\t\tlet message = \"\"\n\t\t\t\tlet recipients = this.jids.send_all_messages_to_jids\n\n\n\t\t\t\tswitch(typeof obj.message) {\n\t\t\t\t\tcase \"string\":\n\t\t\t\t\t\tmessage = obj.message\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase \"object\":\n\t\t\t\t\t\tif(typeof obj.message.recipients === \"object\") {\n\t\t\t\t\t\t\trecipients =  obj.message.recipients\n\t\t\t\t\t\t} else if(typeof obj.message.to === \"string\") {\n\t\t\t\t\t\t\trecipients = [obj.message.to]\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(typeof obj.message.message === \"string\") {\n\t\t\t\t\t\t\tmessage = obj.message.message\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\t// send the actual message\n\t\t\t\tconst stanzas = recipients.map((address) =>\n\t\t\t\t  xml(\"message\", { to: address, type: \"chat\" }, xml(\"body\", {}, message)),\n\t\t\t\t);\n\t\t\t\tthis.xmpp.sendMany(stanzas).catch(console.error);\n\n\n\n\t\t\t\t// Send response in callback if required\n\t\t\t\tif(obj.callback) {\n\t\t\t\t\tthis.stateChange_callbacks.push((json_obj: object) => {\n\t\t\t\t\t\tthis.sendTo(obj.from, obj.command, json_obj, obj.callback);\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Xmpp(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Xmpp())();\n}\n"],
  "mappings": "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",
  "names": []
}
