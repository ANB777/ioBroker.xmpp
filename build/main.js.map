{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.2.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport { Client, client, xml, jid } from \"@xmpp/client\";\nimport debug from \"@xmpp/debug\";\nimport { totalmem } from \"os\";\n\n\ninterface jidConfig {\n\tallow_messages_from_jids: string[];\n\tallow_subscribe_from_jids: string[];\n\tsend_all_messages_to_jids: string[];\n}\n\n\nclass Xmpp extends utils.Adapter {\n\txmpp: Client = client();\n\txmpp_connected: boolean = false;\n\tstateChange_callbacks: Function[] = [];\n\tjids: jidConfig = {\n\t\t\tallow_messages_from_jids: [],\n\t\t\tallow_subscribe_from_jids: [],\n\t\t\tsend_all_messages_to_jids: []\n\t\t};\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"xmpp\",\n\t\t});\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\n\t\t// this.on(\"objectChange\", this.onObjectChange.bind(this));\n\t\tthis.on(\"message\", this.onMessage.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState(\"info.connection\", false, true);\n\t\tthis.xmpp_connected = true;\n\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// this.log.info(\"config starttls: \" + this.config.tls);\n\t\t// this.log.info(\"config port: \" + this.config.port);\n\n\t\tlet allow_messages_from_jids = this.config.users\n\t\t\t.filter(user => user.allow_messages)\n\t\t\t.map(user => user.jid)\n\n\t\tlet allow_subscribe_from_jids = this.config.users\n\t\t\t.filter(user => user.allow_subscribe)\n\t\t\t.map(user => user.jid)\n\n\t\tlet send_all_messages_to_jids = this.config.users\n\t\t\t.filter(user => user.send_all_messages)\n\t\t\t.map(user => user.jid)\n\n\t\tthis.jids.allow_messages_from_jids = allow_messages_from_jids\n\t\tthis.jids.allow_subscribe_from_jids = allow_subscribe_from_jids\n\t\tthis.jids.send_all_messages_to_jids = send_all_messages_to_jids\n\t\t\n\n\n\t\tvar scheme;\n\t\tswitch(this.config.tls) {\n\t\t\tcase 'plain':\n\t\t\tcase 'starttls':\n\t\t\tdefault:\n\t\t\t\tscheme = \"xmpp\"\n\t\t\t\tbreak;\n\n\t\t\tcase 'ssl':\n\t\t\t\tscheme = \"xmpps\"\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis.xmpp = client({\n\t\t\tservice: `${scheme}://${this.config.hostname}:${this.config.port}`,\n\t\t\tdomain: this.config.hostname,\n\t\t\tresource: \"iobroker\",\n\t\t\tusername: this.config.username,\n\t\t\tpassword: this.config.password,\n\t\t});\n\n\t\tdebug(this.xmpp, true);\n\n\t\tthis.xmpp.on(\"error\", (err) => {\n\t\t\tthis.log.error(\"XMPP error: \" + err);\n\t\t\t// console.error(err);\n\t\t});\n\n\t\tthis.xmpp.on(\"offline\", () => {\n\t\t\tthis.setState(\"info.connection\", false, true);\n\t\t\tthis.xmpp_connected = false;\n\t\t\tthis.log.info(\"XMPP disconnected\");\n\t\t\t// console.log(\"offline\");\n\t\t});\n\n\t\tthis.xmpp.on(\"stanza\", async (stanza) => {\n\t\t\tif (stanza.is(\"message\")) {\n\t\t\t\t// console.log(stanza)\n\n\t\t\t\tlet sender_jid = jid(stanza.attrs.from)\n\t\t\t\tlet sender_resource = sender_jid.getResource().toString()\n\t\t\t\tlet sender = sender_jid.bare().toString()\n\t\t\t\t\n\t\t\t\tlet receiver_jid = jid(stanza.attrs.to)\n\t\t\t\tlet receiver = receiver_jid.bare().toString()\n\n\n\t\t\t\tif(allow_messages_from_jids.includes(sender)) {\n\t\t\t\t\t// console.log(stanza)\n\n\t\t\t\t\tlet body = stanza.getChildText('body');\n\t\t\t\t\tthis.setStateAsync(\"last_message.from.resource\", sender_resource, true);\n\t\t\t\t\tthis.setStateAsync(\"last_message.from.user\", sender, true);\n\t\t\t\t\tthis.setStateAsync(\"last_message.to.user\", receiver, true);\n\t\t\t\t\tthis.setStateAsync(\"last_message.message\", body, true);\n\t\t\t\t\tlet object = {\n\t\t\t\t\t\t\"from.resource\": sender_resource,\n\t\t\t\t\t\t\"from.user\": sender,\n\t\t\t\t\t\t\"to.user\": receiver,\n\t\t\t\t\t\t\"message\": body\n\t\t\t\t\t}\n\t\t\t\t\tthis.setStateAsync(\"last_message.object\", JSON.stringify(object), true);\n\n\t\t\t\t\t// this.setState(\"info.connection\", true, true);\n\t\t\t\t}\n\t\t\t\t// await this.xmpp.send(xml(\"presence\", { type: \"unavailable\" }));\n\t\t\t\t// await this.xmpp.stop();\n\t\t\t}\n\t\t});\n\n\t\tthis.xmpp.on(\"online\", async (address) => {\n\t\t\t// Makes itself available\n\t\t\tawait this.xmpp.send(xml(\"presence\"));\n\n\t\t\tthis.setState(\"info.connection\", true, true);\n\t\t\tthis.xmpp_connected = true;\n\n\t\t\t// Sends a chat message to itself\n\t\t\t// const message = xml(\n\t\t\t// \t\"message\",\n\t\t\t// \t{ type: \"chat\", to: 'anb@txtng.eu' },\n\t\t\t// \txml(\"body\", {}, \"I'm here to talk to you!\"),\n\t\t\t// );\n\t\t\t// await this.xmpp.send(message);\n\t\t});\n\n\t\tthis.xmpp.start().catch(this.log.error);\n\n\n\n\n\n\n\t\t/*\n\t\tFor every state in the system there has to be also an object of type state\n\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t*/\n\t\tawait this.setObjectNotExistsAsync(\"last_message.object\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"the last received message as json object\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"json\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\t\tawait this.setObjectNotExistsAsync(\"last_message.from.resource\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"resource of user that send the last received message\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"text\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\t\tawait this.setObjectNotExistsAsync(\"last_message.from.user\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"user that send the last received message\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"text\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\t\tawait this.setObjectNotExistsAsync(\"last_message.to.user\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"user the last received message was send to\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"text\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\t\tawait this.setObjectNotExistsAsync(\"last_message.message\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname:\" text of the last received message\",\n\t\t\t\ttype: \"string\",\n\t\t\t\trole: \"text\",\n\t\t\t\tread: true,\n\t\t\t\twrite: false,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});\n\n\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\t\tthis.subscribeStates(\"testVariable\");\n\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n\t\t// this.subscribeStates(\"lights.*\");\n\t\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n\t\t// this.subscribeStates(\"*\");\n\n\t\t/*\n\t\t\tsetState examples\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t\t*/\n\t\t// the variable testVariable is set to true as command (ack=false)\n\t\tawait this.setStateAsync(\"testVariable\", true);\n\n\t\t// same thing, but the value is flagged \"ack\"\n\t\t// ack should be always set to true if the value is received from or acknowledged from the target system\n\t\tawait this.setStateAsync(\"testVariable\", { val: true, ack: true });\n\n\t\t// same thing, but the state is deleted after 30s (getState will return null afterwards)\n\t\tawait this.setStateAsync(\"testVariable\", { val: true, ack: true, expire: 30 });\n\n\t\t// examples for the checkPassword/checkGroup functions\n\t\tlet result = await this.checkPasswordAsync(\"admin\", \"iobroker\");\n\t\tthis.log.info(\"check user admin pw iobroker: \" + result);\n\n\t\tresult = await this.checkGroupAsync(\"admin\", \"admin\");\n\t\tthis.log.info(\"check group user admin group admin: \" + result);\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\n\t\t\tthis.xmpp.send(xml(\"presence\", { type: \"unavailable\" })).then(() => {\n\t\t\t\tthis.xmpp.stop().then(() => {\n\t\t\t\t\tcallback();\n\t\t\t\t});\n\t\t\t});\n\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else {\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tif(state.ack && id === 'last_message.object') {\n\t\t\t\tthis.stateChange_callbacks.map(async (fn, i, fns) => {\n\t\t\t\t\tlet json = state.val?.toString() ?? 'null';\n\t\t\t\t\tfn(JSON.parse(json));\n\t\t\t\t\tdelete fns[i];\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t/**\n\t * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t */\n\tprivate onMessage(obj: ioBroker.Message): void {\n\t\t// TODO: delay transmission\n\t\tif(!this.xmpp_connected) {\n\t\t\tconsole.log('XMPP not connected! refusing sendTo')\n\t\t\treturn;\n\t\t}\n\n\t\t// this.log.info(\"received command\" + JSON.stringify(obj));\n\n\t\t// console.log(obj)\n\t\tif (typeof obj === \"object\" && obj.message) {\n\t\t\tif (obj.command === \"send\") {\n\t\t\t\t// e.g. send email or pushover or whatever\n\t\t\t\tthis.log.info(\"send command\");\n\n\t\t\t\t// // Sends a chat message to itself\n\t\t\t\t// const message = xml(\n\t\t\t\t// \t\"message\",\n\t\t\t\t// \t{ type: \"chat\", to: ['anb@txtng.eu'] },\n\t\t\t\t// \txml(\"body\", {}, obj.message.toString()),\n\t\t\t\t// );\n\t\t\t\t// this.xmpp.send(message);\n\t\t\t\t\n\t\t\t\t// const new_message = JSON.stringify(this.config.users);\n\t\t\t\t// const recipients = send_all_messages_to_jids;\n\t\t\t\t// const stanzas = recipients.map((address) =>\n\t\t\t\t//   xml(\"message\", { to: address, type: \"chat\" }, xml(\"body\", {}, new_message)),\n\t\t\t\t// );\n\t\t\t\t// this.xmpp.sendMany(stanzas).catch(console.error);\n\n\t\t\t\t \n\n\t\t\t\t// Send response in callback if required\n\t\t\t\tif(obj.callback) {\n\t\t\t\t\tthis.stateChange_callbacks.push((json_obj: object) => {\n\t\t\t\t\t\tthis.sendTo(obj.from, obj.command, json_obj, obj.callback);\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Xmpp(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Xmpp())();\n}\n"],
  "mappings": "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",
  "names": ["debug"]
}
